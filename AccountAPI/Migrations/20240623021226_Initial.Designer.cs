// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AccountAPI.Migrations
{
    [DbContext(typeof(AccountsApiContext))]
    [Migration("20240623021226_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.31")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Models.Account", b =>
                {
                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AgencyNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<long?>("CreditCardNumber")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("MainCustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Restriction")
                        .HasColumnType("bit");

                    b.Property<string>("SecundaryCustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("SpecialLimit")
                        .HasColumnType("float");

                    b.HasKey("Number");

                    b.HasIndex("AgencyNumber");

                    b.HasIndex("CreditCardNumber");

                    b.HasIndex("MainCustomerId");

                    b.HasIndex("SecundaryCustomerId");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Complement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Neighborhood")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("Models.Agency", b =>
                {
                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Restriction")
                        .HasColumnType("bit");

                    b.HasKey("Number");

                    b.HasIndex("AddressId");

                    b.ToTable("Agency");
                });

            modelBuilder.Entity("Models.AgencyEmployee", b =>
                {
                    b.Property<string>("AgencyId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(1);

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(2);

                    b.HasKey("AgencyId", "EmployeeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("AgencyEmployee");
                });

            modelBuilder.Entity("Models.Client", b =>
                {
                    b.Property<string>("Document")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("BirthDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Restriction")
                        .HasColumnType("bit");

                    b.Property<double>("Salary")
                        .HasColumnType("float");

                    b.HasKey("Document");

                    b.HasIndex("AddressId");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("Models.CreditCard", b =>
                {
                    b.Property<long>("Number")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Number"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Flag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Limit")
                        .HasColumnType("float");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Number");

                    b.ToTable("CreditCard");
                });

            modelBuilder.Entity("Models.Employee", b =>
                {
                    b.Property<string>("Document")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("AgencyNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BirthDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Manager")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Register")
                        .HasColumnType("int");

                    b.Property<double>("Salary")
                        .HasColumnType("float");

                    b.HasKey("Document");

                    b.HasIndex("AddressId");

                    b.HasIndex("AgencyNumber");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("Models.Operation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("AccountNumber");

                    b.ToTable("Operation");
                });

            modelBuilder.Entity("Models.OperationAccount", b =>
                {
                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(1);

                    b.Property<int>("OperationId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.HasKey("AccountId", "OperationId");

                    b.HasIndex("OperationId");

                    b.ToTable("OperationAccount");
                });

            modelBuilder.Entity("Models.Account", b =>
                {
                    b.HasOne("Models.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.CreditCard", "CreditCard")
                        .WithMany()
                        .HasForeignKey("CreditCardNumber");

                    b.HasOne("Models.Client", "MainCustomer")
                        .WithMany()
                        .HasForeignKey("MainCustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Client", "SecundaryCustomer")
                        .WithMany()
                        .HasForeignKey("SecundaryCustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Agency");

                    b.Navigation("CreditCard");

                    b.Navigation("MainCustomer");

                    b.Navigation("SecundaryCustomer");
                });

            modelBuilder.Entity("Models.Agency", b =>
                {
                    b.HasOne("Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Models.AgencyEmployee", b =>
                {
                    b.HasOne("Models.Agency", "Agency")
                        .WithMany("AgencyEmployees")
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Employee", "Employee")
                        .WithMany("AgencyEmployees")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Agency");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Models.Client", b =>
                {
                    b.HasOne("Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Models.Employee", b =>
                {
                    b.HasOne("Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Agency", null)
                        .WithMany("Employees")
                        .HasForeignKey("AgencyNumber");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Models.Operation", b =>
                {
                    b.HasOne("Models.Account", "Account")
                        .WithMany("Extract")
                        .HasForeignKey("AccountNumber");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Models.OperationAccount", b =>
                {
                    b.HasOne("Models.Account", "Account")
                        .WithMany("OperationAccounts")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Operation", "Operation")
                        .WithMany("OperationAccounts")
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Operation");
                });

            modelBuilder.Entity("Models.Account", b =>
                {
                    b.Navigation("Extract");

                    b.Navigation("OperationAccounts");
                });

            modelBuilder.Entity("Models.Agency", b =>
                {
                    b.Navigation("AgencyEmployees");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Models.Employee", b =>
                {
                    b.Navigation("AgencyEmployees");
                });

            modelBuilder.Entity("Models.Operation", b =>
                {
                    b.Navigation("OperationAccounts");
                });
#pragma warning restore 612, 618
        }
    }
}
